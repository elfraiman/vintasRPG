// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  player        Player?
  playerId      Int?

  @@map(name: "users")
}

model Player {
  id                  Int           @id @default(autoincrement())
  name                String?       @unique
  user                User          @relation(fields: [userId], references: [id])
  userId              Int           @unique
  strength            Int
  dexterity           Int
  constitution        Int
  intelligence        Int
  weightLimit         Int           @default(100) // Since its not static, maybe do the calculation on loading a player.
  health              Int           @default(10)
  maxHealth           Int           @default(10)
  defense             Int
  damageReduction     Int
  evasion             Int
  experience          Int
  experienceToLevelUp Int           @default(300)
  level               Int           @default(1)
  inventory           Inventory[]
  maxInventorySlots   Int           @default(16)
  equipement          PlayerEquip[]
  gold                Int           @default(500)

  inventoryId Int
  @@map(name: "players")
}

model Currencies {
  id             Int              @id @default(autoincrement())
  name           String
  DropCollection DropCollection[]

  @@map(name: "currenices")
}

model Item {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  weight       Float
  maximumStack Int
  inventory    Inventory[]
  minDamage    Int?
  maxDamage    Int?
  attackSpeed  Float?
  cost         Int?
  armor        Int?
  tier         String?
  description  String?
  itemType     ItemType      @relation(fields: [itemTypeId], references: [id])
  itemTypeId   Int
  playerEquip  PlayerEquip[]
}

model ItemType {
  id          Int     @id @default(autoincrement())
  type        String
  displayName String
  subType     String?
  items       Item[]
}

model Inventory {
  id           Int    @id @default(autoincrement())
  itemId       Int
  itemQuantity Int
  item         Item   @relation(fields: [itemId], references: [id])
  playerId     Int
  player       Player @relation(fields: [playerId], references: [id])

  @@map(name: "inventory")
}

model EquipSlotTypes {
  id                 Int           @id @default(autoincrement())
  maximumUsableSlots Int           @default(1)
  type               String        @default("")
  displayName        String
  playerEquips       PlayerEquip[]
}

model PlayerEquip {
  id       Int            @id @default(autoincrement())
  playerId Int
  player   Player         @relation(fields: [playerId], references: [id])
  item     Item           @relation(fields: [itemId], references: [id])
  itemId   Int
  slotId   Int
  slot     EquipSlotTypes @relation(fields: [slotId], references: [id])

  @@map(name: "equipement")
}

model DropCollection {
  id           Int        @id
  currency     Currencies @relation(fields: [currenciesId], references: [id])
  currenciesId Int

  @@map(name: "dropCollections")
}

model Monster {
  id                 Int     @id @default(autoincrement())
  name               String? @unique
  health             Int
  maxHealth          Int     @default(10)
  attackSpeed        Float   @default(2.0)
  armor              Float
  damageReduction    Int
  evasion            Int
  experience         Int
  level              Int
  minDamage          Int
  maxDamage          Int
  currencyMultiplier Float   @default(1.1)
  goldDrop           Int     @default(5)

  @@map(name: "monsters")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}
